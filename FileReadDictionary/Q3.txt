In hashing, insertion will be in O(1) in the case where we do not check for duplicate insertions, but in the case for duplicates, we will have O(1 + m) where m is the number of elements of linked list in case a collision occurs. For BST, it will be O(log n) if the tree is balanced, else if the tree is degenerate then atmost the worst case will be log(n).

Search complexity for hashing will be on average O(1) and at worst (1 + m) for hash tables. For faster access it is recommnded to use hashtables for dictionary. Tree searching will be O(log n) only after converting a degenerate tree to a BST which will take log(n). But once the tree is BST, then it will guarantee O(log n) at worst case at all times. So if you're looking for constant access time, then opt for a BST, else the hashtable is good for fast access.
